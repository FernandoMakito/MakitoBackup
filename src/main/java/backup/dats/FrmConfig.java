/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package backup.dats;

import java.awt.Desktop;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author fernando
 */
public class FrmConfig extends javax.swing.JFrame {

    /**
     * Creates new form FrmConfig
     */
    Log logger;
    String senhaMigracaoWeb = "Migrar@Web";
    String siglaMigracao;

    public FrmConfig() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        txtExecutaAntes = new javax.swing.JTextField();
        btLoadExecutaAntes = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        txtExecutaDepois = new javax.swing.JTextField();
        btLoadExecutaDepois = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btSalvaConfig = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        btConfiguraPost = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        btDadosFtp = new javax.swing.JButton();
        ckFtp = new javax.swing.JCheckBox();
        ckDesligaPC = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        btAgendar = new javax.swing.JButton();
        ckBkFacil = new javax.swing.JCheckBox();
        btNomeArquivo = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        btArquivosTemp = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtDiasMantem = new javax.swing.JSpinner();
        jPanel9 = new javax.swing.JPanel();
        cmbCompactacao = new javax.swing.JComboBox<>();
        jPanel11 = new javax.swing.JPanel();
        ckPastasAdic = new javax.swing.JCheckBox();
        btPastasAdic = new javax.swing.JButton();
        ckMigrarWeb = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Configurações do Backup");
        setLocationByPlatform(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Bat executar antes do backup"));

        txtExecutaAntes.setToolTipText("Selecione um arquivo .bat para executar antes de copiar os arquivos");

        btLoadExecutaAntes.setText("Buscar");
        btLoadExecutaAntes.setToolTipText("Selecione um arquivo .bat para executar antes de copiar os arquivos");
        btLoadExecutaAntes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLoadExecutaAntesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(txtExecutaAntes, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btLoadExecutaAntes))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(txtExecutaAntes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btLoadExecutaAntes))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Bat executar depois do backup"));

        txtExecutaDepois.setToolTipText("Selecione um arquivo .bat para executar depois de copiar os arquivos");

        btLoadExecutaDepois.setText("Buscar");
        btLoadExecutaDepois.setToolTipText("Selecione um arquivo .bat para executar depois de copiar os arquivos");
        btLoadExecutaDepois.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLoadExecutaDepoisActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(txtExecutaDepois, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btLoadExecutaDepois)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(txtExecutaDepois, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btLoadExecutaDepois))
        );

        jButton1.setText("Cancelar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btSalvaConfig.setBackground(new java.awt.Color(1, 109, 187));
        btSalvaConfig.setForeground(new java.awt.Color(255, 255, 255));
        btSalvaConfig.setText("Salvar configurações");
        btSalvaConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSalvaConfigActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Backup PostgreSQL"));

        btConfiguraPost.setText("Dados PostgreSQL");
        btConfiguraPost.setToolTipText("Inclua os dados para conexão com o PostgreSQL");
        btConfiguraPost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConfiguraPostActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(btConfiguraPost)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btConfiguraPost, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("FTP"));

        btDadosFtp.setText("Dados");
        btDadosFtp.setToolTipText("Inclua os dados de conexão com o servidor de FTP");
        btDadosFtp.setEnabled(false);
        btDadosFtp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDadosFtpActionPerformed(evt);
            }
        });

        ckFtp.setText("Backup FTP");
        ckFtp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ckFtpMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ckFtpMouseReleased(evt);
            }
        });
        ckFtp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckFtpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(ckFtp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btDadosFtp)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btDadosFtp)
                .addComponent(ckFtp))
        );

        ckDesligaPC.setText("Desligar o computador ao terminar o backup");
        ckDesligaPC.setToolTipText("Desligar o computador quando terminar de fazer o backup");
        ckDesligaPC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ckDesligaPCMouseClicked(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Backup Automático"));

        btAgendar.setText("Agendar");
        btAgendar.setToolTipText("Configurar agendamento de backup");
        btAgendar.setEnabled(false);
        btAgendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAgendarActionPerformed(evt);
            }
        });

        ckBkFacil.setText("Backup automático");
        ckBkFacil.setToolTipText("Com esse modo ativo o backup irá iniciar automáticamente ao executar o programa");
        ckBkFacil.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ckBkFacilMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ckBkFacilMouseReleased(evt);
            }
        });
        ckBkFacil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckBkFacilActionPerformed(evt);
            }
        });

        btNomeArquivo.setText("Nome arquivo");
        btNomeArquivo.setToolTipText("Definir nome do arquivo gerado no backup");
        btNomeArquivo.setEnabled(false);
        btNomeArquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNomeArquivoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(ckBkFacil)
                .addGap(12, 12, 12)
                .addComponent(btAgendar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btNomeArquivo)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btAgendar)
                .addComponent(ckBkFacil)
                .addComponent(btNomeArquivo))
        );

        jLabel1.setForeground(new java.awt.Color(0, 102, 204));
        jLabel1.setText("Visualizar Log");
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel1MouseReleased(evt);
            }
        });

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Arquivos Temporários"));

        btArquivosTemp.setText("Pasta temporária");
        btArquivosTemp.setToolTipText("Definir onde serão copiados os arquivos temporários");
        btArquivosTemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btArquivosTempActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(btArquivosTemp)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btArquivosTemp, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Apagar backups"));

        jLabel2.setText("Manter backups por");

        jLabel3.setText("dias");

        txtDiasMantem.setModel(new javax.swing.SpinnerNumberModel(15, 1, 999, 1));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDiasMantem, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addComponent(txtDiasMantem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipo de compactação"));

        cmbCompactacao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cmbCompactacao, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(cmbCompactacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 5, Short.MAX_VALUE))
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Pastas adicionais"));

        ckPastasAdic.setText("Backup pastas Adicionais");
        ckPastasAdic.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ckPastasAdicMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ckPastasAdicMouseReleased(evt);
            }
        });
        ckPastasAdic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckPastasAdicActionPerformed(evt);
            }
        });

        btPastasAdic.setText("Pastas");
        btPastasAdic.setToolTipText("Inclua os dados de conexão com o servidor de FTP");
        btPastasAdic.setEnabled(false);
        btPastasAdic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPastasAdicActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addComponent(ckPastasAdic)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btPastasAdic)
                .addGap(0, 0, 0))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btPastasAdic)
                .addComponent(ckPastasAdic))
        );

        ckMigrarWeb.setText("Migrar para Web");
        ckMigrarWeb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ckMigrarWebMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ckMigrarWebMouseReleased(evt);
            }
        });
        ckMigrarWeb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckMigrarWebActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ckDesligaPC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(ckMigrarWeb)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btSalvaConfig)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckDesligaPC)
                    .addComponent(jLabel1))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btSalvaConfig)
                    .addComponent(ckMigrarWeb))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btSalvaConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSalvaConfigActionPerformed
        try {
            logger = new Log();

            Configuracoes cfg = new Configuracoes();
            cfg.setPropriedade("manter_arquivos", txtDiasMantem.getValue().toString());
            cfg.setPropriedade("executa_antes", txtExecutaAntes.getText());
            cfg.setPropriedade("executa_depois", txtExecutaDepois.getText());
            cfg.setPropriedade("compactacao", String.valueOf(getTipoCompactacao()));
            cfg.setPropriedade("backup_facil", String.valueOf(ckBkFacil.isSelected()));
            cfg.setPropriedade("desliga_pc", String.valueOf(ckDesligaPC.isSelected()));
            cfg.setPropriedade("ftp_backup", String.valueOf(ckFtp.isSelected()));
            cfg.setPropriedade("backup_adicional", String.valueOf(ckPastasAdic.isSelected()));
            cfg.setPropriedade("migrar_web", String.valueOf(ckMigrarWeb.isSelected()));
            fecharForm();

        } catch (FileNotFoundException | UnsupportedEncodingException ex) {
            logger.erro(ex.getMessage());
        } catch (IOException ex) {
            logger.erro(ex.getMessage());
        }

    }//GEN-LAST:event_btSalvaConfigActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        fecharForm();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            Configuracoes cfg = new Configuracoes();
            txtDiasMantem.setValue(Integer.valueOf(cfg.getPropriedade("manter_arquivos")));
            txtExecutaAntes.setText(cfg.getPropriedade("executa_antes"));
            txtExecutaDepois.setText(cfg.getPropriedade("executa_depois"));
            setTipoCompactacao(cfg.getPropriedade("compactacao"));
            ckBkFacil.setSelected(Boolean.valueOf(cfg.getPropriedade("backup_facil")));
            ckDesligaPC.setSelected(Boolean.valueOf(cfg.getPropriedade("desliga_pc")));
            ckFtp.setSelected(Boolean.valueOf(cfg.getPropriedade("ftp_backup")));
            ckPastasAdic.setSelected(Boolean.valueOf(cfg.getPropriedade("backup_adicional")));
            ckMigrarWeb.setSelected(Boolean.valueOf(cfg.getPropriedade("migrar_web")));
            btDadosFtp.setEnabled(ckFtp.isSelected());
            btPastasAdic.setEnabled(ckPastasAdic.isSelected());
            btAgendar.setEnabled(ckBkFacil.isSelected());
            btNomeArquivo.setEnabled(ckBkFacil.isSelected());
        } catch (UnsupportedEncodingException ex) {
            logger.erro(ex.getMessage());
        } catch (IOException ex) {
            logger.erro(ex.getMessage());
        }

    }//GEN-LAST:event_formWindowOpened

    private void btLoadExecutaAntesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLoadExecutaAntesActionPerformed
        selecionaExecutavel("antes");
    }//GEN-LAST:event_btLoadExecutaAntesActionPerformed

    private void btLoadExecutaDepoisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLoadExecutaDepoisActionPerformed
        selecionaExecutavel("depois");
    }//GEN-LAST:event_btLoadExecutaDepoisActionPerformed

    private void btConfiguraPostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConfiguraPostActionPerformed
        FrmPost frm = new FrmPost();
        Image im = Toolkit.getDefaultToolkit().getImage("icon.png");
        frm.setIconImage(im);
        frm.setVisible(true);
    }//GEN-LAST:event_btConfiguraPostActionPerformed

    private void btDadosFtpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDadosFtpActionPerformed
        FrmFtp frm = new FrmFtp();
        Image im = Toolkit.getDefaultToolkit().getImage("icon.png");
        frm.setIconImage(im);
        frm.setVisible(true);
    }//GEN-LAST:event_btDadosFtpActionPerformed

    private void ckFtpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ckFtpMouseClicked

        if (ckFtp.isSelected()) {
            btDadosFtp.setEnabled(true);
        } else {
            btDadosFtp.setEnabled(false);
        }
    }//GEN-LAST:event_ckFtpMouseClicked

    private void ckFtpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckFtpActionPerformed

    }//GEN-LAST:event_ckFtpActionPerformed

    private void ckDesligaPCMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ckDesligaPCMouseClicked

    }//GEN-LAST:event_ckDesligaPCMouseClicked

    private void btAgendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAgendarActionPerformed
        FrmAgendar frm = new FrmAgendar();
        Image im = Toolkit.getDefaultToolkit().getImage("icon.png");
        frm.setIconImage(im);
        frm.setVisible(true);
    }//GEN-LAST:event_btAgendarActionPerformed

    private void ckBkFacilMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ckBkFacilMouseClicked

    }//GEN-LAST:event_ckBkFacilMouseClicked

    private void jLabel1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseReleased
        try {
            Desktop.getDesktop().open(new File("MakitoBackupLogs"));
        } catch (IOException ex) {
            Logger.getLogger(FrmConfig.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jLabel1MouseReleased

    private void btNomeArquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNomeArquivoActionPerformed
        FrmNomeArquivo frm = new FrmNomeArquivo();
        Image im = Toolkit.getDefaultToolkit().getImage("icon.png");
        frm.setIconImage(im);
        frm.setVisible(true);
    }//GEN-LAST:event_btNomeArquivoActionPerformed

    private void btArquivosTempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btArquivosTempActionPerformed
        FrmArquivosTemp frm = new FrmArquivosTemp();
        Image im = Toolkit.getDefaultToolkit().getImage("icon.png");
        frm.setIconImage(im);
        frm.setVisible(true);
    }//GEN-LAST:event_btArquivosTempActionPerformed

    private void ckBkFacilMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ckBkFacilMouseReleased
        btAgendar.setEnabled(ckBkFacil.isSelected());
        btNomeArquivo.setEnabled(ckBkFacil.isSelected());
        if (ckBkFacil.isSelected()) {
            verificaConfigBackup();
        }
    }//GEN-LAST:event_ckBkFacilMouseReleased

    private void ckFtpMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ckFtpMouseReleased
        btDadosFtp.setEnabled(ckFtp.isSelected());
    }//GEN-LAST:event_ckFtpMouseReleased

    private void ckBkFacilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckBkFacilActionPerformed

    }//GEN-LAST:event_ckBkFacilActionPerformed

    private void ckPastasAdicMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ckPastasAdicMouseClicked

        btPastasAdic.setEnabled(ckPastasAdic.isSelected());
    }//GEN-LAST:event_ckPastasAdicMouseClicked

    private void ckPastasAdicMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ckPastasAdicMouseReleased

    }//GEN-LAST:event_ckPastasAdicMouseReleased

    private void ckPastasAdicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckPastasAdicActionPerformed

        btPastasAdic.setEnabled(ckPastasAdic.isSelected());
    }//GEN-LAST:event_ckPastasAdicActionPerformed

    private void btPastasAdicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPastasAdicActionPerformed
        FrmPastasAdic frm = new FrmPastasAdic();
        Image im = Toolkit.getDefaultToolkit().getImage("icon.png");
        frm.setIconImage(im);
        frm.setVisible(true);
    }//GEN-LAST:event_btPastasAdicActionPerformed

    private void ckMigrarWebMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ckMigrarWebMouseClicked

    }//GEN-LAST:event_ckMigrarWebMouseClicked

    private void ckMigrarWebMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ckMigrarWebMouseReleased

    }//GEN-LAST:event_ckMigrarWebMouseReleased

    private void ckMigrarWebActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckMigrarWebActionPerformed
        ativaMigracaoWeb();
    }//GEN-LAST:event_ckMigrarWebActionPerformed
    private void ativaMigracaoWeb() {
        if (ckMigrarWeb.isSelected()) {
            if (!JOptionPane.showInputDialog(this, "Informe a senha para habilitar a migração web", "Migrar@Web").equals(senhaMigracaoWeb)) {
                JOptionPane.showMessageDialog(null, "A senha está incorreta", "Erro", JOptionPane.ERROR_MESSAGE);
                ckMigrarWeb.setSelected(false);
            } else {
                JOptionPane.showMessageDialog(null, "Migração ativada com sucesso", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                siglaMigracao = "";
                String arquivo = "MakitoFtp.txt";
                if (new File(arquivo).exists()) {
                    try (BufferedReader br = new BufferedReader(new FileReader(arquivo))) {
                        int i = 0;
                        for (String line; (line = br.readLine()) != null;) {
                            if (i == 1) {
                                siglaMigracao = line;
                            }
                            i++;
                        }
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(FrmConfig.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(FrmConfig.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                String info = "Confirme";
                if (siglaMigracao.isEmpty()) {
                    info = "Informe";
                }
                siglaMigracao = JOptionPane.showInputDialog(this, "<html>" + info + " a <b>SIGLA</b> do cliente</html>", siglaMigracao);
                if (!siglaMigracao.isEmpty()) {
                    try {
                        Configuracoes cfg = new Configuracoes();
                        cfg.setPropriedade("sigla_migrar_web",siglaMigracao);
                    } catch (UnsupportedEncodingException ex) {
                        Logger.getLogger(FrmConfig.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(FrmConfig.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }else{
                    ckMigrarWeb.setSelected(false);
                    JOptionPane.showMessageDialog(null, "A SIGLA não pode ser vázia", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    private void fecharForm() {
        setVisible(false);
    }

    private void verificaConfigBackup() {
        try {
            Configuracoes cfg = new Configuracoes();
            String pastaOrigem = cfg.getPropriedade("pasta_origem");
            String pastaDestino = cfg.getPropriedade("pasta_destino");
            if (pastaOrigem.equals("")) {
                String pathAtual = new File(".").getCanonicalPath();
                int dialogResult = JOptionPane.showConfirmDialog(null, "<html>A pasta atual é <b>" + pathAtual + "</b><br>Está é a pasta do sistema?</html>", "Definir pasta do sistema", JOptionPane.YES_NO_OPTION);
                if (dialogResult == JOptionPane.YES_OPTION) {
                    cfg.setPropriedade("pasta_origem", pathAtual);
                } else {
                    JOptionPane.showMessageDialog(null, "<html>Informe qual é a <b>pasta do sistema</b></html>");
                    pastaOrigem = selecionaPasta();
                    if (new File(pastaOrigem).isDirectory()) {
                        cfg.setPropriedade("pasta_origem", pastaOrigem);
                    } else {
                        JOptionPane.showMessageDialog(null, "Selecione uma pasta válida");
                        ckBkFacil.setSelected(false);
                    }
                }
            }

            if (pastaDestino.equals("")) {
                JOptionPane.showMessageDialog(null, "<html>Informe onde o backup será salvo</html>");
                selecionaDestinos();
            }
        } catch (UnsupportedEncodingException ex) {
            logger.erro(ex.getMessage());
        } catch (IOException ex) {
            logger.erro(ex.getMessage());
        }
    }

    private void selecionaDestinos() {
        FrmDestinos frm = new FrmDestinos();
        Image im = Toolkit.getDefaultToolkit().getImage("icon.png");
        frm.setIconImage(im);
        frm.setVisible(true);
        frm.addComponentListener(new ComponentAdapter() {
            public void componentHidden(ComponentEvent e) {
                try {
                    Configuracoes cfg = new Configuracoes();
                    if (cfg.getPropriedade("pasta_destino").equals("")) {
                        JOptionPane.showMessageDialog(null, "<html>Selecione ao menos um local de destino</html>");
                        selecionaDestinos();
                    }
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(FrmConfig.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(FrmConfig.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    private String selecionaPasta() {
        JFileChooser j = new JFileChooser(new File("."));
        j.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        j.setDialogTitle("Selecione uma pasta");
        j.setApproveButtonText("Selecionar Pasta");
        j.setAcceptAllFileFilterUsed(false);
        Integer opt = j.showOpenDialog(this);
        if (opt == 0) {
            return j.getSelectedFile().getAbsolutePath();
        } else {
            return "";
        }
    }

    private void selecionaExecutavel(String local) {
        JFileChooser j = new JFileChooser(new File("."));
        j.setDialogType(JFileChooser.OPEN_DIALOG);
        j.setDialogTitle("Carregar executável");
        j.setApproveButtonText("Selecionar");
        j.setFileFilter(new FileNameExtensionFilter("Arquivo BAT", "BAT"));
        Integer opt = j.showSaveDialog(this);
        if (opt == 0) {
            if (!j.getSelectedFile().getName().contains(" ")) {
                if (local.equals("antes")) {
                    txtExecutaAntes.setText(j.getSelectedFile().getAbsolutePath());
                } else {
                    txtExecutaDepois.setText(j.getSelectedFile().getAbsolutePath());
                }
            } else {
                JOptionPane.showMessageDialog(this, "O nome do arquivo não pode conter espaços");
            }
        }
    }

    private int getTipoCompactacao() {
        String compacSelecionada = cmbCompactacao.getSelectedItem().toString();
        switch (compacSelecionada) {
            case "Baixa (Rápida)":
                return 1;
            case "Normal":
                return 5;
            case "Alta":
                return 7;
            case "Ultra (Lenta)":
                return 9;
            default:
                return 3;
        }
    }

    private void setTipoCompactacao(String valor) {
        List<String> tiposCompactacao = new ArrayList<>();
        tiposCompactacao.add("Baixa (Rápida)");
        tiposCompactacao.add("Normal");
        tiposCompactacao.add("Alta");
        tiposCompactacao.add("Ultra (Lenta)");
        cmbCompactacao.setModel(new DefaultComboBoxModel(tiposCompactacao.toArray()));

        if (null != valor) {
            switch (valor) {
                case "1":
                    cmbCompactacao.setSelectedIndex(0);
                    break;
                case "5":
                    cmbCompactacao.setSelectedIndex(1);
                    break;
                case "7":
                    cmbCompactacao.setSelectedIndex(2);
                    break;
                case "9":
                    cmbCompactacao.setSelectedIndex(3);
                    break;
                default:
                    break;
            }

        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmConfig.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmConfig().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAgendar;
    private javax.swing.JButton btArquivosTemp;
    private javax.swing.JButton btConfiguraPost;
    private javax.swing.JButton btDadosFtp;
    private javax.swing.JButton btLoadExecutaAntes;
    private javax.swing.JButton btLoadExecutaDepois;
    private javax.swing.JButton btNomeArquivo;
    private javax.swing.JButton btPastasAdic;
    private javax.swing.JButton btSalvaConfig;
    private javax.swing.JCheckBox ckBkFacil;
    private javax.swing.JCheckBox ckDesligaPC;
    private javax.swing.JCheckBox ckFtp;
    private javax.swing.JCheckBox ckMigrarWeb;
    private javax.swing.JCheckBox ckPastasAdic;
    private javax.swing.JComboBox<String> cmbCompactacao;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JSpinner txtDiasMantem;
    private javax.swing.JTextField txtExecutaAntes;
    private javax.swing.JTextField txtExecutaDepois;
    // End of variables declaration//GEN-END:variables
}
